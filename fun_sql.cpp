/* этот файл для написания функций на sqlite3 */
#include <iostream>
#include <map>
#include <limits>
#include "sql_src/sqlite3.h"
#include "headders_src/extern.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Открывает базу данных SQLite или создает новую, если она не существует.
 *
 * Функция открывает базу данных с именем "lib_base.db". Если файл базы данных не существует,
 * он будет создан. Возвращает указатель на объект базы данных SQLite.
 *
 * @return Указатель на объект базы данных SQLite.
 */
sqlite3 *open_or_create_db()
{
    /* открываем базу данных */
    sqlite3 *db;                                     // создаем указатель на базу данных
    int exitCode = sqlite3_open("lib_base.db", &db); // открываем базу данных

    /* вывод об процессе */
    std::cout << std::endl;
    std::cout << "openning database..."; // выводим сообщение о процессе открытия базы данных
    std::cout << std::endl;

    /* проверяем результат процесса открытия базы данных */
    if (exitCode)
    {
        std::cerr << "status: error (open_or_create_db): " << sqlite3_errmsg(db) << std::endl; // выводим сообщение об ошибке
    }
    else
    {
        std::cout << "status: success(open_or_create_db)" << std::endl; // выводим сообщение о успешном открытии базы данных
    }

    // sqlite3_close(db); // Закрываем базу данных
    return db; // возвращаем указатель на базу данных
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Создает новую таблицу в базе данных SQLite, если она не существует.
 *
 * Функция запрашивает у пользователя имя для новой таблицы и создает таблицу с полями id, title, author, year, genre,
 * если таблицы с таким именем еще нет в базе данных. Возвращает имя созданной таблицы.
 *
 * @param db Указатель на объект базы данных SQLite.
 * @return Имя созданной таблицы.
 */
std::string create_table(sqlite3 *db)
{
    /* дадим пользователю ввести название таблицы вручную */
    //
    std::cout << std::endl;
    std::cout << "input table name: "; // выводим сообщение
    std::string table_name;            // переменная для имени создаваемой таблицы
    /* V!!! ОБЯЗАТЕЛЬНО использовать ignore !!!V */
    std::cin.ignore();                  // Очищаем символ новой строки из буфера
    std::getline(std::cin, table_name); // Считываем введенное пользователем имя таблицы

    /* для начала выведим текс что открываем таблицу */
    std::cout << std::endl;
    std::cout << "opening table...";
    std::cout << std::endl;

    /* создаем переменную для сообщения об ошибках */
    char *errMsg = 0; // указатель для сообщения об ошибках
    /* ниже подготавливаем текст для запроса, в него вставляем нашу переменную с названием таблицы */
    std::string cr_tb = "CREATE TABLE IF NOT EXISTS " + table_name + " (id INT PRIMARY KEY NOT NULL,"
                                                                     "title TEXT NOT NULL,"
                                                                     "author TEXT NOT NULL,"
                                                                     "year INT NOT NULL,"
                                                                     "genre TEXT NOT NULL);";

    int exitCode = sqlite3_exec(db, cr_tb.c_str(), 0, 0, &errMsg); // выполняем сам запрос и сохраняем результат его выполнения в переменную

    /* выполним проверку */
    if (exitCode)
    {
        std::cerr << "status: error (create_table): " << errMsg << std::endl; // выводим сообщение об ошибке
    }
    else
    {
        std::cout << "status: success(create_table)" << std::endl; // выводим сообщение о успешном создании таблицы
    }

    sqlite3_free(errMsg); // освобождаем память
    return table_name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Отображает список таблиц в базе данных SQLite и позволяет выбрать одну из них или создать новую таблицу.
 *
 * Функция выполняет SQL-запрос для получения списка всех таблиц в базе данных и выводит их на экран с порядковыми номерами.
 * Пользователь может выбрать существующую таблицу по номеру или создать новую таблицу, выбрав соответствующий вариант.
 * В случае отсутствия таблиц в базе данных, функция автоматически создает новую таблицу.
 *
 * @param db Указатель на объект базы данных SQLite.
 * @return Имя выбранной таблицы или вновь созданной таблицы.
 */
std::string list_table(sqlite3 *db) // функция автоматического создания таблицы в базе данных если ее не существует
{
    /* выведим список доступных таблиц */
    std::cout << "Tables in the database:" << std::endl;                      // Вывод заголовка
    std::string query = "SELECT name FROM sqlite_master WHERE type='table';"; // текст самого запроса
    std::cout << "Avaliable tables in the database:" << std::endl;            // выводим заголовок

    char *errorMessage = nullptr; // Объявление указателя на строку ошибки
    static int tableCount = 1;    // переменная для нумерации таблиц

    /* флаг сработает тогда если запрос ниже даст результат */
    static bool tableFound = false; // флаг для находа книг

    /* переменная для выбора номера таблицы */
    int numTable;

    /* переменная для хранения наименования выбранной таблицы */
    std::string chosenTable; // будет храниться имя выбранной таблицы

    /* список для хранения списка таблиц в БД чтоб можно было их выдергивать по ключу */
    static std::map<int, std::string> tables; // список

    /* выводим предложение о создании новой таблицы для начала */
    std::cout << std::endl;                            //
    std::cout << "none_ 0: create table" << std::endl; // выведем сообщение о том что набрав ноль пользователь сможет создать новую таблицу

    /* выводим список таблиц */
    int rc = sqlite3_exec(db, query.c_str(), [](void *data, int argc, char **argv, char **colName) -> int { // Выполнение SQL-запроса, это лямбда функция
        if (argc > 0)                                                                                       // Проверка наличия таблиц в базе данных
        {
            std::cout << "Table " << tableCount << ": " << argv[0] << std::endl; // Вывод названия таблицы с номером
            // tables.push_back(std::string(argv[0]));                              // Добавление названия таблицы в векторs
            tables[tableCount] = std::move(argv[0]);
            tableCount++;
            tableFound = true; // Установка флага на нахождение таблицы
        }
        return 0; // Возврат успешного завершения
    },
                          nullptr, &errorMessage); // Передача параметров для обработки результатов

    if (rc != SQLITE_OK)                                         // проверка запроса
    {                                                            // Проверка на успешное выполнение запроса
        std::cerr << "SQL error: " << errorMessage << std::endl; // Вывод сообщения об ошибке
        sqlite3_free(errorMessage);                              // Освобождение памяти, занятой ошибкой
    }
    /* обнуляем tableCount */
    tableCount = 1; // обнуляем tableCount

    /* тестовый блок для отладки */
    // for (const auto &row : tables)
    // {
    //     // std::cout <<row.first << " " << row.second << std::endl;
    //     std::cout << row.second << std::endl;
    // }

    /* проверка если не найдены таблицы и флаг поднят */
    if (!tableFound) // Проверка на нахождение таблицы
    {
        tableFound = false;                                           // обнуляем
        std::cout << std::endl;                                       //
        std::cout << "No tables found in the database." << std::endl; // Сообщение о отсутствии таблиц
        // chosenTable = create_table(db);                               // создаем таблицу
        chosen_table = create_table(db); // создаем таблицу
    }
    /* выводим сообщение о предолжении ввести номер таблицы или создать новую */
    else
    {
        std::cout << std::endl;
        std::cout << "Choose your table(input num): "; // Сообщение о предложении выбора таблицы
        std::cin >> numTable;                          // воодим значение таблицы
        std::cout << std::endl
                  << std::endl;

        /* создадим переменные для проверки адекватности введенного значения */
        // auto numTable_begin = tables.begin(); // эта переменная для начального значения списка с таблицами
        auto numTable_end = tables.end(); // эта переменная для конечного значения списка с таблицами
        if (numTable < 0 || numTable > numTable_end->first)
        {
            std::cout << std::endl;
            std::cout << "ERROR: the key was entered incorrectly"
                      << ::std::endl;
            chosen_table = list_table(db);
        }
        /* создаем условие если выбран 0 то создаем таблицу, если > 0 то заносим имя таблицы в переменную */
        if (numTable == 0) // если 0, то создам таблицу
        {
            // chosenTable = create_table(db); // создаем таблицу
            chosen_table = create_table(db); // создаем таблицу
        }
        else // запускаем выборку таблиц
        {
            for (const auto &row : tables)
            {
                /* ищем совпадение по ключу */
                if (row.first == numTable) //
                {
                    std::cout << "find !" << std::endl;
                    // chosenTable = row.second; // добавляем в нашу переменную для хранения работы с таблицой наименования таблицы
                    chosen_table = row.second; // добавляем в нашу переменную для хранения работы с таблицой наименования таблицы
                    // std::cout << chosenTable << std::endl;
                    std::cout << chosen_table << std::endl;
                }
            }
        }
    }
    // return chosenTable; // возвращаем значение выбранной таблицы
    return chosen_table; // возвращаем значение выбранной таблицы
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Удаляет указанную таблицу из базы данных SQLite после подтверждения пользователя.
 *
 * Функция запрашивает у пользователя подтверждение на удаление таблицы. Если пользователь подтверждает
 * удаление, то функция выполняет SQL-запрос для удаления указанной таблицы. В случае отмены удаления или
 * некорректного ввода, функция возвращается в меню.
 *
 * @param db Указатель на объект базы данных SQLite.
 * @param table_name_for_del Имя таблицы, которую необходимо удалить.
 */
void del_table(sqlite3 *db, std::string table_name_for_del) // функция принимает указатель на БД и наименование таблицы
{
    /* блок диалога с пользователем, уверен ли он в удалении */
    std::cout << std::endl;
    std::cout << "ATANTION !" << std::endl;
    std::cout << "are you sure you want to delete !?" << std::endl;
    std::cout << "1 - yes" << std::endl;
    std::cout << "2 - no" << std::endl;
    std::cout << "...: ";

    int i;  // переменная выбора
    int rc; // переменная для запроса
    char *sqlite3_errmsg;
    std::cin >> i; // вводим значени

    /* создаем текст для sql запроса */
    std::string dl_tbl = "DROP TABLE IF EXISTS " + table_name_for_del + ";";

    // int menu_again; // определяем переменную для возврата в меню

    /* обработка введенного значения */
    switch (i)
    {
        /* позиция если согласен с удалением */
    case 1:                                                                       // удаляем
        rc = sqlite3_exec(db, dl_tbl.c_str(), nullptr, nullptr, &sqlite3_errmsg); // удаляем таблицу

        /* проверяем */
        if (rc != SQLITE_OK)
        {
            std::cerr << "SQL error: " << sqlite3_errmsg << std::endl; // Вывод сообщения об ошибке
            sqlite3_free(sqlite3_errmsg);                              // Освобождение памяти, занятой ошибкой
        }

        /* возвращаемся обратно */
        chosen_table = list_table(db);                    // функция по выводу списка таблиц
        menu_ch = menu();                                 // возвращаемся в меню
        return jump_to_choice(menu_ch, db, chosen_table); // обрабатываем опять
        break;

        /* позиция если отменяешь удаление */
    case 2:               // отмена, возвращаем
        menu_ch = menu(); // возвращаемся в меню

        return jump_to_choice(menu_ch, db, table_name_for_del); // обрабатываем опять
        break;

    default: // неправильное значение
        /* если выбрано неправильное значение, то возвращаем функцию заново */
        std::cout << std::endl;
        std::cout << "wrong value" << std::endl; // выводим сообщение об ошибке
        std::cout << std::endl;
        del_table(db, table_name_for_del); // рекурсивно вызываем функцию
        break;
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Добавляет книгу в указанную таблицу базы данных SQLite.
 *
 * Функция запрашивает у пользователя данные о книге (название, автор, жанр, год) и добавляет запись в таблицу.
 * Перед добавлением определяется максимальный существующий идентификатор (id) и новый id назначается на 1 больше.
 * Если таблица пуста, то id будет равен 1.
 *
 * @param db Указатель на объект базы данных SQLite.
 * @param table_name Имя таблицы, в которую будет добавлена запись.
 */
void add_book_in_table(sqlite3 *db, const std::string &table_name)
{
    /* создадим переменные которые будут служить для данных о книге */
    std::string title, author, genre; // строковые переменные
    int year, id;                     // численная переменная
    sqlite3_stmt *stmt_id;            // указатель для выражения, будет служить для id

    /* запрос для получения максимального id */
    std::string sql_id = "SELECT MAX(id) FROM " + table_name + ";"; // запрос для получения максимального значения

    /* подготавливаем запрос на получения id */
    int result = sqlite3_prepare_v2(db, sql_id.c_str(), -1, &stmt_id, NULL); // заносим в переменную результат подготовки запроса
    if (result != SQLITE_OK)                                                 // если запрос подготовлен неуспешно
    {
        std::cerr << "SQLite error: " << sqlite3_errmsg(db) << std::endl; // сообщение об ошибке
        return;
    }

    result = sqlite3_step(stmt_id); // выполним шаг
    if (result == SQLITE_ROW)
    {
        id = sqlite3_column_int(stmt_id, 0); // заносим в переменную id максимальное значение
        id++;                                // увеличиваем id
    }
    else
    {
        id = 1; // если таблица пустая, то присваиваем уникальное значение
    }

    sqlite3_finalize(stmt_id); // освобождаем память

    /* далее начнем воод данных */
    /* название таблицы */
    std::cout << "enter book title: ";
    std::cin.ignore(); // очищаем буфер
    std::getline(std::cin, title);
    std::cout << std::endl;

    /* автор */
    std::cout << "enter book author: ";
    // std::cin.ignore(); // очищаем буфер
    std::getline(std::cin, author);
    std::cout << std::endl;

    /* жанр */
    std::cout << "enter book genre: ";
    // std::cin.ignore(); // очищаем буфер
    std::getline(std::cin, genre);
    std::cout << std::endl;

    /* год */
    // Проверка ввода года
    while (true) // пока не будет прерван с помощью breake
    {
        /* пердлагаем ввод */
        std::cout << "enter book year: ";
        std::cin >> year;

        // Проверка на успешное преобразование в число
        if (std::cin.fail()) // проверяет успешно ли прошло приобразование введенного значения в число, если НЕ успешно
        {
            std::cin.clear();                                                      // Очистка флага ошибки
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');    // Очистка потока
            std::cout << "Invalid input. Please enter a valid year." << std::endl; // выводим сообщение об ошибкеы
        }
        else // если введено правильно
        {
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очистка остатка потока

            break; // ВЫХОД
        }
    }

    /* создадим запрос */
    std::string sql_add_book = "INSERT INTO " + table_name + " (id, title, author, year, genre) VALUES (?, ?, ?, ?, ?);"; // создаем текст запроса

    sqlite3_stmt *stmt; // результат запроса
    const char *pzTest;

    /* подготовка запроса */
    if (sqlite3_prepare_v2(db, sql_add_book.c_str(), -1, &stmt, &pzTest) == SQLITE_OK) // сама функция подготовки запроса, ее включили в условие
    {
        /* теперь привязываем значения */
        sqlite3_bind_int(stmt, 1, id);                                 // добавляем год книги
        sqlite3_bind_text(stmt, 2, title.c_str(), -1, SQLITE_STATIC);  // добавляем название книги
        sqlite3_bind_text(stmt, 3, author.c_str(), -1, SQLITE_STATIC); // добавляем автора книги
        sqlite3_bind_int(stmt, 4, year);                               // добавляем год книги
        sqlite3_bind_text(stmt, 5, genre.c_str(), -1, SQLITE_STATIC);  // добавляем жанр книги

        /* выполнение самого sql - запроса */
        if (sqlite3_step(stmt) != SQLITE_DONE) // возвращаем значение и если его результат не равен "сделано"
        {
            /* возвращаем ошибку */
            std::cerr << "SQL error: " << sqlite3_errmsg(db) << std::endl;
        }
        else // успешное выполнение
        {
            std::cout << "Book added successfully" << std::endl; // выводим сообщение об успешном добавлении
        }
        /* завершаем работу с запросом */
        sqlite3_finalize(stmt);
    }
    else // если подготовка запроса не удалась
    {
        std::cerr << "SQL error: failed to prepare statement" << std::endl;
    }

    /* далее дадим выбор пользователю  */
    std::cout << " \nwould you like to create a new book again ?\n";
    while (true)
    {
        std::cout << "1. Yes, create a new book\n";
        std::cout << "2. No, return in main menu\n";
        std::cout << "..: ";
        int ch;
        std::cin >> ch;
        std::cout << "\n";

        /* проверка на то что введено число, а не символы или буквв */
        if (std::cin.fail())
        {
            std::cin.clear();                                                   // Очистка флага ошибки
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очистка потока
            std::cout << "Invalid input. Please enter a number 1 or 2 !!!\n";   // выводим сообщение об ошибкеы
            continue;
        }

        if (ch == 1) // рекурсивно возвращаем функцию
        {
            return add_book_in_table(db, table_name); // рекурсия
        }
        else if (ch == 2) // если хотим вернуться в меню
        {
            menu_ch = menu(); // возвращаемся в меню

            return jump_to_choice(menu_ch, db, table_name); // обрабатываем опять
            break;
        }

        std::cout << "Invalid input. Please enter a valid choise !!!\n"; // в случае неправильного значения
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* эта функция служит для захвата данных в буфер с массивом */